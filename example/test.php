<?

require_once('../OperationManager.php');
require_once('../MemcacheStateManager.php');
require_once('../FileStateManager.php');

class Service {
	public function longOperation($a, $b) {
		sleep(0);
		return $a + $b;
	}
}

function waitForDone($stateManager, $opid) {
	while (($state = $stateManager->getState($opid)) == "process") {
		echo "State = ", $state, "\n";
		sleep(1);
	}

	if ($state === false)
		exit(1);



	if ($state == "done")
		echo "Result = ", $stateManager->getResult($opid), "\n";

	if ($state == "error")
		echo "Error = ", $stateManager->getResult($opid), "\n"; 
}

$stateManager = new MemcacheStateManager('localhost');
//$stateManager = new FileStateManager('/tmp');


$manager = new OperationManager(new Service(), $stateManager);


//Do not use one StateManager object for OperationManager and state checking.
$stateManagerStatus = new MemcacheStateManager('localhost');
//$stateManagerStatus = new FileStateManager('/tmp');

//Example using autogenerated operation ID
$opid = $manager->longOperation(5, 6);
echo "Autogenerated operation ID = ", $opid, "\n";
waitForDone($stateManagerStatus, $opid);
$stateManager->clear($opid);



//Example using pregenerated operation ID
$opid = $manager->pregenerateId();
echo "Pregenerated operation ID = ", $opid, "\n";
$manager->longOperation(5, 6);
waitForDone($stateManager, $opid);
$stateManager->clear($opid);


?>
